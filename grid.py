import ccxt
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, filters
import pandas as pd
import numpy as np
import json
import os
import logging
import asyncio
import httpx
import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
try:
    if os.getenv('CONFIG_JSON'):
        config = json.loads(os.getenv('CONFIG_JSON'))
    else:
        with open('config.json', 'r') as config_file:
            config = json.load(config_file)
    binance_api_key = config['BINANCE_API_KEY']
    binance_secret = config['BINANCE_SECRET']
    bot_token = config['TELEGRAM_BOT_TOKEN']
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    raise SystemExit("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ config.json –∞–±–æ –∑–º—ñ–Ω–Ω—É CONFIG_JSON")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Binance
binance = ccxt.binance({
    'apiKey': binance_api_key,
    'secret': binance_secret,
    'enableRateLimit': True,
})

# –§—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –ø–∞—Ä
def analyze_pairs():
    logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ä–∏–Ω–∫–∏...")
    binance.load_markets()
    pairs = [pair for pair in binance.markets.keys() 
             if pair.endswith('/USDT:USDT') and binance.markets[pair]['swap'] and pair not in ['BTC/USDT:USDT', 'ETH/USDT:USDT', 'BNB/USDT:USDT', 'TRX/USDT:USDT']]
    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(pairs)} —Ñ‚Äô—é—á–µ—Ä—Å–Ω–∏—Ö USDT-–ø–∞—Ä: {pairs[:5]}...")
    
    volumes = []
    for pair in pairs:
        try:
            ticker = binance.fetch_ticker(pair)
            volume = ticker.get('quoteVolume')
            if volume is not None and isinstance(volume, (int, float)):
                volumes.append((pair, volume))
            else:
                logger.warning(f"{pair} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –æ–±—Å—è–≥")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {pair} –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–±—Å—è–≥—É: {e}")
            continue
    volumes.sort(key=lambda x: x[1], reverse=True)
    pairs = [p[0] for p in volumes[:50]]
    logger.info(f"–í–∏–±—Ä–∞–Ω–æ —Ç–æ–ø-50 –ø–∞—Ä –∑–∞ –æ–±—Å—è–≥–æ–º: {pairs[:5]}...")
    
    candidates = []
    for pair in pairs:
        try:
            logger.info(f"–ê–Ω–∞–ª—ñ–∑—É—é {pair}...")
            ohlcv = binance.fetch_ohlcv(pair, '1h', limit=24)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            
            df['tr'] = np.maximum(df['high'] - df['low'], 
                                  np.maximum(abs(df['high'] - df['close'].shift()), 
                                             abs(df['low'] - df['close'].shift())))
            atr = df['tr'].mean()
            volatility = (atr / df['close'].iloc[-1]) * 100
            if np.isnan(volatility) or volatility == 0:
                logger.warning(f"{pair} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å ({volatility}%)")
                continue
            logger.info(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å {pair}: {volatility:.2f}%")
            
            ohlcv_3d = binance.fetch_ohlcv(pair, '4h', limit=18)
            df_3d = pd.DataFrame(ohlcv_3d, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            price_range = (df_3d['high'].max() - df_3d['low'].min()) / df_3d['close'].iloc[-1] * 100
            logger.info(f"–î—ñ–∞–ø–∞–∑–æ–Ω {pair}: {price_range:.2f}%")
            
            ticker = binance.fetch_ticker(pair)
            volume_usd = ticker.get('quoteVolume')
            if volume_usd is None or not isinstance(volume_usd, (int, float)):
                logger.warning(f"{pair} –ø—Ä–æ–ø—É—â–µ–Ω–æ: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –æ–±—Å—è–≥")
                continue
            logger.info(f"–û–±—Å—è–≥ {pair}: ${volume_usd:,.2f}")
            
            market = binance.market(pair)
            min_price = market['limits']['price']['min'] if market['limits']['price']['min'] else 0.0001
            
            if (2 <= volatility <= 5 and 
                10 <= price_range <= 40 and 
                volume_usd >= 150_000_000):
                current_price = ticker['last']
                grid_range = price_range * 0.01 * current_price * 1.2
                lower_price = round(current_price - grid_range / 2, 4)
                upper_price = round(current_price + grid_range / 2, 4)
                
                candidates.append({
                    'pair': pair,
                    'volatility': volatility,
                    'current_price': current_price,
                    'lower_price': lower_price,
                    'upper_price': upper_price,
                    'grids': 15,
                    'volume_usd': volume_usd,
                    'min_price': min_price,
                })
                logger.info(f"{pair} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
            else:
                logger.info(f"{pair} –≤—ñ–¥—Å—ñ—è–Ω–æ: –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å={volatility:.2f}%, –¥—ñ–∞–ø–∞–∑–æ–Ω={price_range:.2f}%, –æ–±—Å—è–≥=${volume_usd:,.2f}")
            time.sleep(0.1)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {pair}: {e}")
            continue
    
    candidates = sorted(candidates, key=lambda x: x['volatility'], reverse=True)
    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(candidates)} –ø–∞—Ä")
    return candidates

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏–¥-–±–æ—Ç–∞
def create_grid_bot(pair, current_price, lower_price, upper_price, grids, leverage=10, capital=50):
    try:
        logger.info(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏–¥-–±–æ—Ç–∞ –¥–ª—è {pair}...")
        binance.set_leverage(leverage, pair)
        
        grid_levels = np.linspace(lower_price, upper_price, grids)
        position_size = capital * leverage / grids
        
        for level in grid_levels:
            try:
                if level < current_price:
                    order = binance.create_limit_buy_order(pair, position_size / level, level)
                    logger.info(f"–†–æ–∑–º—ñ—â–µ–Ω–æ –ª–æ–Ω–≥-–æ—Ä–¥–µ—Ä: {pair} –Ω–∞ ${level:.4f}, —Ä–æ–∑–º—ñ—Ä: {position_size / level:.4f}")
                elif level > current_price:
                    order = binance.create_limit_sell_order(pair, position_size / level, level)
                    logger.info(f"–†–æ–∑–º—ñ—â–µ–Ω–æ —à–æ—Ä—Ç-–æ—Ä–¥–µ—Ä: {pair} –Ω–∞ ${level:.4f}, —Ä–æ–∑–º—ñ—Ä: {position_size / level:.4f}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {pair} –Ω–∞ ${level:.4f}: {e}")
                continue
        
        logger.info(f"–ì—Ä–∏–¥-–±–æ—Ç –¥–ª—è {pair} –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {grids} —Å—ñ—Ç–æ–∫")
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏–¥-–±–æ—Ç–∞ –¥–ª—è {pair}: {e}")
        return False

# –û–±—Ä–æ–±–Ω–∏–∫ /start
async def start(update, context):
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Ç–æ–ø", callback_data='update_top')],
        [InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data='status')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –ì–æ—Ç–æ–≤–∏–π –∑–Ω–∞–π—Ç–∏ –ø–∞—Ä–∏ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ? –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'update_top':
        await query.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª—ñ–∑ –ø–∞—Ä...")
        pairs = await send_top_pairs(query.message, context)
        if pairs:
            context.user_data['pairs'] = pairs
            keyboard = [[InlineKeyboardButton(f"üìà {p['pair'].replace(':USDT', '')}", callback_data=f"trade_{i}")]
                       for i, p in enumerate(pairs)]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í–∏–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è –≥—Ä–∏–¥-–±–æ—Ç–∞:", reply_markup=reply_markup)
    elif query.data == 'status':
        await query.message.reply_text("üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π! –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
    elif query.data.startswith('trade_'):
        index = int(query.data.split('_')[1])
        pairs = context.user_data.get('pairs', [])
        if index < len(pairs):
            pair_data = pairs[index]
            pair = pair_data['pair']
            success = create_grid_bot(
                pair,
                pair_data['current_price'],
                pair_data['lower_price'],
                pair_data['upper_price'],
                pair_data['grids'],
            )
            if success:
                await query.message.reply_text(f"‚úÖ –ì—Ä–∏–¥-–±–æ—Ç –¥–ª—è {pair.replace(':USDT', '')} –∑–∞–ø—É—â–µ–Ω–æ!")
            else:
                await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≥—Ä–∏–¥-–±–æ—Ç–∞ –¥–ª—è {pair.replace(':USDT', '')}.")
        else:
            await query.message.reply_text("‚ö†Ô∏è –ü–∞—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø-–ø–∞—Ä
async def send_top_pairs(message, context):
    for attempt in range(3):
        try:
            pairs = analyze_pairs()
            if not pairs:
                await message.reply_text("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏: –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å 2-5%, –æ–±—Å—è–≥ >$150M, –¥—ñ–∞–ø–∞–∑–æ–Ω 10-40%.")
                logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä")
                return []
            
            response = f"üìä –¢–æ–ø-–ø–∞—Ä–∏ –¥–ª—è Grid Trading (10x) ({len(pairs)}):\n\n"
            for i, p in enumerate(pairs, 1):
                pair_name = p['pair'].replace(':USDT', '')
                response += (f"{i}Ô∏è‚É£ {pair_name} üìà\n"
                            f"   üí∞ –¶—ñ–Ω–∞: ${p['current_price']:.4f}\n"
                            f"   ‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {p['volatility']:.2f}%\n"
                            f"   üìè –î—ñ–∞–ø–∞–∑–æ–Ω: ${p['lower_price']:.4f}-${p['upper_price']:.4f}\n"
                            f"   ‚ö†Ô∏è –ú—ñ–Ω. —Ü—ñ–Ω–∞: ${p['min_price']:.4f}\n\n")
            
            keyboard = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data='update_top')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await message.reply_text(response, reply_markup=reply_markup)
            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {len(pairs)} –ø–∞—Ä")
            return pairs
        except httpx.ReadError as e:
            logger.error(f"–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±–∞ {attempt + 1}: {e}")
            await asyncio.sleep(2)
    await message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
    logger.error("–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—ñ—Å–ª—è 3 —Å–ø—Ä–æ–±")
    return []

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
def main():
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç...")
    app = Application.builder().token(bot_token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == '__main__':
    main()